*lift.txt*   "Lift" completions from multiple completion functions.

Version: 0.1
Author: Adrián Pérez de Castro <aperez@igalia.com>
License: GPLv3

CONTENTS                                                *lift-contents*

Introduction                  |lift-introduction|
Variables                     |lift-variables|
Key Mappings                  |lift-key-mappings|
Sources                       |lift-sources|
  Nearby words                |lift-source-near|
  Omni Completion             |lift-source-omni|
  User Completion             |lift-source-user|
  Syntax keywords             |lift-source-syntax|
  Adding sources              |lift-source-custom|
API Reference                 |lift-api-reference|
Tips                          |lift-tips|
  Using clang_complete        |lift-tips-clang-complete|


===========================================================================
INTRODUCTION                                           *lift-introduction*


===========================================================================
VARIABLES                                              *lift-variables*

The following variables can be used to configure Lift:

`g:lift#sources`
		Dictionary with the names of the sources to use to feed
		Vim's completion system for each 'filetype'. Each key of
		the dictionary is the name of the file type, and its
		associated value is a list with the names of the sources
		to use for that file type.

		It is possible to specify a set of fall-back sources to
		be used for file types which do not have a key in the
		dictionary using the `_` key.

		See |lift-sources| for a list of the included sources, and
		|lift-source-custom| for instructions on how to integrate
		and use third party sources.

		Default value:
>
		let g:lift#sources = { '_': ['near', 'omni', 'user']}
<
`g:lift#annotate_sources`
		Show in the completion menu the name of the source that
		provided each completion candidate. (Default: 1).

`g:lift#max_items`
		Maximum number of results to feed into Vim's completion
		system. If the total amount of completion candidates
		gathered from all the sources goes over this number, some
		of the candidates will not br shown. (Default: 100).

`g:lift#max_source_items`
		Maximum number of results to fetch from each completion
		source. (Default: 50).

`g:lift#blacklist_buffers`
		Buffer types in which disable the plug-in. This must be
		a dictionary, with the keys being the names of the buffer
		types. (Default: { `'quickfix'`:`1`, `'nofile'`:`1`, `'help'`:`1`,
		`'directory'`:`1`, `'unlisted'`:`1`, `'unite'`:`1` }).

`g:lift#close_preview_window`
		Handle closing the preview window automatically after
		choosing a completion. Manually setting this value to `1`
		may be needed if you use a completion function that opens
		the preview window by itself and it is not closed properly
		when using it as a source. For example, this can be used
		with |jedi-vim|.  (Default: 1 if 'completeopt' contains
		`preview`).


===========================================================================
KEY MAPPINGS                                           *lift-key-mappings*

lift#trigger_comlete()
		Use this function to trigger completion. Typically this
		is used from an insert mode key mapping to trigger
		completion. A popular setting is to bind the <Tab> key:
>
		inoremap <expr><Tab> lift#trigger_completion()

===========================================================================
SOURCES                                                *lift-sources*

The following sources are included with Lift:

  - Nearby words (|lift-source-near|)
  - Omni Completion (|lift-source-omni|)
  - User Completion (|lift-source-user|)

Any completion


---------------------------------------------------------------------------
SOURCE - NEARBY WORDS                                  *lift-source-near*

The `nearby` source scans the lines surrounding the cursor and provides
the words in them as completions. The lines before the cursor are
considered more relevant than the ones following it. Also, words have
with more relevance will be those in lines closer to the cursor. The
rationale behind this is that the user is more likely to write again
those words which were used recently. This is true for most programming
languages, and works reasonably well for plain text files as well.

The following variables control how many lines surrounding the cursor
are scanned:

`g:lift#near#backward_lines`
		Number of lines to scan from before the cursor. Use
		`-1` to scan from the beginning of the buffer, and `0` to
		scan from the first visible line. (Default: 150).

`g:lift#near#forward_lines`
		Number of lines to scan after the cursor. Use `-1` to
		scan to the end of the buffer, and `0` to scan to the
		last visible line. (Default: 50).

This source is enabled by default.


---------------------------------------------------------------------------
SOURCE - OMNI COMPLETION                               *lift-source-omni*

The `omni` source uses the function configured for Omni Completion (see
|compl-omni|) to obtain possible completions.

This source is enabled by default, but it will only return completions if
'omnifunc' is set.


---------------------------------------------------------------------------
SOURCE - USER COMPLETION                               *lift-source-user*

The `user` source uses the function configured for User Completion (see
|compl-function|) to obtain possible completions.

The source is enabled by default, but it will only return completions if
'completefunc' is set.


---------------------------------------------------------------------------
SOURCE - SYNTAX KEYWORDS                               *lift-source-syntax*

The `syntax` source uses the `syntaxcomplete#Complete` function from the
runtime files included with the editor. It provides completions from the
set of words defined as keywords for the current file type.

This source has no options, and it is disabled by default.


---------------------------------------------------------------------------
SOURCE - ADDING SOURCES                                *lift-source-custom*

Any completion function designed to be used for Omni Completion (see
|compl-omni|) or for User Completion (see |compl-function|) can be used
with Lift. For more details on how to write completion functions, see
|complete-functions|.

To make Lift aware of a completion function use the `lift#register_source()`
function. For example:
>
	function custom_completion(findstart, base)
		" Gather completions and return them
	endfunction

	lift#register_source('custom', 'custom_completion')
<
The first argument is the name of the completion source, which is used
to annotate the completions. The second argument is the name of the
function which implements the completion.

Do not forget to add the name of your completion source to the
`g:lift#sources` variables (see |lift-variables|).


===========================================================================
API REFERENCE                                          *lift-api-reference*

lift#register_source({name}, {function})
	Adds a source to Lift. The {name} must be unique, and {function}
	must be the name of a completion function (see |compl-function|).

lift#all_sources()
	Returns a list with the names of all the sources known by Lift.

lift#active_sources()
	Returns a list with the names of the active sources for the
	current buffer.

lift#complete({findstart}, {base})
	The Lift completion function. You do not need to use it directly,
	as lift will handle setting 'completefunc' to if while in insert
	mode, and restoring the original value when in normal mode.


===========================================================================
TIPS                                                            *lift-tips*

It is recommended to disable the `longest` flag in the 'completeopt' option.
This can be done by adding the following to your `~/.vimrc`:
>
	set completeopt-=longest
<

---------------------------------------------------------------------------
TIPS - USING CLANG-COMPLETE                      *lift-tips-clang-complete*

The `clang_complete` plug-in should work out of the box, as it installs
both a 'completefunc' and an 'omnifunc' that Lift will use automatically.

The author finds best to use `clang_complete` as a source with the following
settings:
>
	let g:clang_make_default_keymappings = 0
	let g:clang_snippets = 0
<
This prevents `clang_complete` from defining key mappings, so completion is
always triggered by Lift.


vim:tw=78:sw=8:ts=8:ft=help:norl:noet
